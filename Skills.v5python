{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n \n# Brain should be defined by default\nbrain=Brain()\n \n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nfrontleft = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nfrontright = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nmiddleleft = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nmiddleright = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nbackleft = Motor(Ports.PORT5, GearSetting.RATIO_6_1, True)\nbackright = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\nleft_motor_a = Motor(Ports.PORT15, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT16, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT17, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 255, 300, MM, 1)\nintakeleft = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nintakeright = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\nintake_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nintake_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nintake = MotorGroup(intake_motor_a, intake_motor_b)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\n \n \n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n \n \n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed\ninitializeRandomSeed()\n \n \ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n \n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n \n#endregion VEXcode Generated Robot Configuration\n \n# ------------------------------------------\n#\n#   Project:      VEXcode Project\n#   Author:       VEX\n#   Created:\n#   Description:  VEXcode V5 Python Project\n#\n# ------------------------------------------\n \n# Library imports\nfrom vex import *\n \n \n# fixing to use blue cartriges in code instead of greens\n \n# left motors\nLm1 = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nLm2 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nLm3 = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)\nLmg = MotorGroup(Lm1,Lm2,Lm3)\n \n#r1 turns intake on\n \n#l1 actuate wallstakes\n# right motors\nRm4 = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)\nRm5 = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nRm6 = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)      \nRmg = MotorGroup(Rm4,Rm5,Rm6)\n \nim1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nim2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\n \nimg = MotorGroup(im1,im2)\n \n# create drivetrain\ndrivetrain = DriveTrain(Lmg, Rmg, 299.24, 320, 270, MM, 0.6)\n \ncontroller_1 = Controller(PRIMARY)\nmogo_cyl = DigitalOut(brain.three_wire_port.a)\nwall_stake_cyl = DigitalOut(brain.three_wire_port.b)\nclaw_cyl = DigitalOut(brain.three_wire_port.c)\n \n# Functions\n# Define a function to drive either forward or backward\ndef driving(direction, speed, speedunits, dist, distanceunits):\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain.set_drive_velocity(speed, speedunits)\n    # Drives the drivetrain for the input variables direction and distance\n    drivetrain.drive_for(direction, dist, distanceunits)\n \n \n \n# Define a function to rotate either left or right\ndef rotate(direction, speed, speedunits, ang):\n    # Sets the speed of the drivetrain rotation to the input variable speed\n    drivetrain.set_turn_velocity(speed, speedunits)\n    # Rotates the robot for the input variables direction and ang\n    drivetrain.turn_for(direction, ang, DEGREES)\n# End functions\n \n# auton code\ndef autonomous():\n    # set drive speed to 50%\n    drivetrain.set_drive_velocity(50, PERCENT)    \n    img.set_velocity(100, PERCENT)\n    # set turn speed to 50%\n    drivetrain.set_turn_velocity(50, PERCENT)\n    # set cylinders\n    claw_cyl.set(False)\n    mogo_cyl.set(False)\n \n    # raise wall mech\n    wall_stake_cyl.set(True)\n    # wait 0.5 seconds\n    wait(1, SECONDS)\n    # drive 200 mm towards alliance wall stake - increased from 100 to 200\n    drivetrain.drive_for(FORWARD, 75, MM)\n    # lower ring onto stake\n    wall_stake_cyl.set(False)\n    wait(1, SECONDS)\n    # back up 300 mm from wall - decreased from 600 to 300\n    drivetrain.drive_for(FORWARD, 50, MM)\n    claw_cyl.set(True)\n    wait(.5, SECONDS)\n    drivetrain.drive_for(REVERSE, 250, MM)\n    # turn left 90 degrees towards mogo\n    drivetrain.turn_for(RIGHT, 50, DEGREES)\n    drivetrain.drive_for(REVERSE, 250, MM)\n    wait(1, SECONDS)\n    drivetrain.set_drive_velocity(10, PERCENT)\n    drivetrain.drive_for(REVERSE, 100, MM)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    mogo_cyl.set(True)\n    wait(0.5, SECONDS)\n    drivetrain.turn_for(RIGHT, 60, DEGREES)\n    img.spin(FORWARD)\n    drivetrain.drive_for(FORWARD, 500, MM)\n    drivetrain.turn_for(RIGHT, 45, DEGREES)\n    drivetrain.drive_for(FORWARD, 550, MM)\n    drivetrain.turn_for(RIGHT, 50, DEGREES)\n    drivetrain.drive_for(FORWARD, 900, MM)\n# Driver control code\ndef driver_control():\n    while True:\n        if controller_1.buttonR1.pressing():\n            img.spin(FORWARD, 100, PERCENT)\n        elif controller_1.buttonDown.pressing():\n            img.spin(REVERSE, 100, PERCENT)\n        elif controller_1.buttonR2.pressing():\n            img.stop()\n        elif controller_1.buttonL1.pressing():\n            mogo_cyl.set(False)# Extend the pneumatic\n        if controller_1.buttonL2.pressing():\n            mogo_cyl.set(True)# Retract the pneumatic\n        elif controller_1.buttonX.pressing():\n            wall_stake_cyl.set(True)\n        elif controller_1.buttonA.pressing():\n                wall_stake_cyl.set(False)\n        elif controller_1.buttonUp.pressing():\n            claw_cyl.set(False)\n \n        elif controller_1.buttonLeft.pressing():\n            claw_cyl.set(True)\n        else:\n \n        # Get joystick values\n            forward = controller_1.axis3.position()\n            turn = controller_1.axis4.position()\n \n        # Calculate motor speeds\n            left_speed = forward + turn\n            right_speed = forward - turn\n \n        # Apply motor speeds\n            Lmg.spin(FORWARD, left_speed, PERCENT)\n            Rmg.spin(FORWARD, right_speed, PERCENT)\n \n \n# End driver control code\n \n# Define the competition to run auton and driver control during matches\ncompetition = Competition(driver_control, autonomous)","textLanguage":"python","robotConfig":[],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}