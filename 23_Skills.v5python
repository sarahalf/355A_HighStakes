{"mode":"Text","hardwareTarget":"brain","textContent":"\n\n\nfrom vex import *\n\n# Brain should be defined by default\nbrain=Brain()\n\n# ------------------------------------------\n#\n#   Project:      VEXcode Project\n#   Author:       VEX\n#   Created:\n#   Description:  VEXcode V5 Python Project\n#\n# ------------------------------------------\n \n# Library imports\nfrom vex import *\n\n\n# fixing to use blue cartriges in code instead of greens\n\n# left motors\nLm1 = Motor(Ports.PORT11, GearSetting.RATIO_6_1, True)\nLm2 = Motor(Ports.PORT12, GearSetting.RATIO_6_1, True)\nLm3 = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\nLmg = MotorGroup(Lm1,Lm2,Lm3)\n\n#r1 turns intake on \n\n#l1 actuate wallstakes\n# right motors\nRm4 = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nRm5 = Motor(Ports.PORT19, GearSetting.RATIO_6_1, False)\nRm6 = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)      \nRmg = MotorGroup(Rm4,Rm5,Rm6)\n \nim1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nim2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\n \n\n \n# create drivetrain\ndrivetrain = DriveTrain(Lmg, Rmg, 299.24, 320, 270, MM, 0.6)\n \ncontroller_1 = Controller(PRIMARY)\nmogo_cyl = DigitalOut(brain.three_wire_port.a)\nwall_stake_cyl = DigitalOut(brain.three_wire_port.b)\nclaw_cyl = DigitalOut(brain.three_wire_port.c)\ndoinker_cyl = DigitalOut(brain.three_wire_port.d)\n\n# Functions\n# Define a function to drive either forward or backward\ndef driving(direction, speed, speedunits, dist, distanceunits):\n    # Sets the speed of the drivetrain to the input variable speed\n    drivetrain.set_drive_velocity(speed, speedunits)\n    # Drives the drivetrain for the input variables direction and distance\n    drivetrain.drive_for(direction, dist, distanceunits)\n \n \n \n# Define a function to rotate either left or right\ndef rotate(direction, speed, speedunits, ang):\n    # Sets the speed of the drivetrain rotation to the input variable speed\n    drivetrain.set_turn_velocity(speed, speedunits)\n    # Rotates the robot for the input variables direction and ang\n    drivetrain.turn_for(direction, ang, DEGREES)\n# End functions\n \n# auton code\ndef autonomous():\n    # Start off auton code\n    \n    \n    \"\"\"\n    AV3 Idea 1 -\n    Starting position - the robot holding the preload in the claw, \n    facing the east wall lined up perpendicular to the alliance stake\n    \"\"\"\n\n    #SPEED VARIABLE\n    speed = 20\n    \"\"\"\n    im2.set_timeout(3, SECONDS)\n    im2.set_velocity(100, PERCENT)\n    im2.spin_for(REVERSE, 360, DEGREES)\n    wait(.5, SECONDS)\n    #Rotate the robot 45 degrees to the right to line up with alliance stake\n    \n\n    # Drop the ring on the alliance stake\n    drivetrain.set_drive_velocity(speed, PERCENT)\n    drivetrain.drive_for(FORWARD, 140, MM)\n    rotate(LEFT, 10, PERCENT, 65)\n    drivetrain.drive_for(REVERSE, 280, MM)\n    \n    mogo_cyl.set(True)\n    wait(.5, SECONDS)\n    \"\"\"\n\n    \n\n    #Lock the claw, and Raise the wallstake mech up\n    claw_cyl.set(False)\n    mogo_cyl.set(False)\n    wall_stake_cyl.set(True)\n    wait(.75, SECONDS)\n\n    #Rotate the robot 45 degrees to the right to line up with alliance stake\n    rotate(RIGHT, 10, PERCENT, 33)\n\n    # Drop the ring on the alliance stake\n    drivetrain.set_drive_velocity(10, PERCENT)\n    drivetrain.drive_for(FORWARD, 90, MM)\n    wall_stake_cyl.set(False)\n    wait(.5, SECONDS)\n    drivetrain.set_drive_velocity(speed, PERCENT)\n    drivetrain.drive_for(FORWARD, 30, MM)\n    claw_cyl.set(True)\n    wait(.2, SECONDS)\n    drivetrain.drive_for(REVERSE, 70, MM)\n    \n    #Back up to the mobile goal\n    rotate(RIGHT, 15, PERCENT, 65)\n    drivetrain.drive_for(REVERSE, 800, MM)\n\n    drivetrain.set_drive_velocity(5, PERCENT)\n    drivetrain.drive_for(REVERSE, 100, MM)\n\n    #Clamp down on the mobile goal\n    mogo_cyl.set(True)\n    wait(.5, SECONDS)\n    claw_cyl.set(True)\n    rotate(RIGHT, 10, PERCENT, 52)\n    im1.set_velocity(100, PERCENT)\n    im1.spin_for(FORWARD, 2000, TURNS, wait=False)\n    drivetrain.set_drive_velocity(speed, PERCENT)\n    drivetrain.drive_for(FORWARD, 650, MM)\n    rotate(RIGHT, 10, PERCENT, 60)\n    im2.set_timeout(2, SECONDS)\n    im2.set_velocity(50, PERCENT)\n    im2.spin_for(REVERSE, 350, DEGREES)\n    #wait(1,SECONDS)\n\n    im1.spin_for(FORWARD, 2000, TURNS, wait = False)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    rotate(RIGHT, 10, PERCENT, 57)\n    im2.spin_for(REVERSE, 350, DEGREES)\n    im1.spin_for(FORWARD, 2000, TURNS, wait=False)\n    drivetrain.drive_for(FORWARD, 900, MM)\n    im2.spin_for(REVERSE, 350, DEGREES)\n \n    rotate(RIGHT, 10, PERCENT, 65)\n    drivetrain.set_timeout(2, SECONDS)\n    drivetrain.drive_for(REVERSE, 250, MM)\n    im2.spin_for(REVERSE, 350, DEGREES)\n    mogo_cyl.set(False)\n    wait(1,SECONDS)\n    drivetrain.drive_for(FORWARD, 550, MM)\n    im1.stop()\n    \n    \"\"\"\n    #Rotate 135 degrees to the right to align with the stacked rings\n    rotate(RIGHT, 10, PERCENT, 60)\n    #wall_stake_cyl.set(True)\n    \n    #Drive forward to intake the bottom red ring\n    drivetrain.set_timeout(2.5, SECONDS)\n    im1.set_velocity(100, PERCENT)\n    im1.spin_for(FORWARD, 1000, TURNS, wait=False)\n    drivetrain.set_drive_velocity(speed, PERCENT)\n    drivetrain.drive_for(FORWARD, 650, MM)\n    #drivetrain.drive_for(REVERSE, 100, MM)\n    #wall_stake_cyl.set(False)\n    \n    #Turn right 115 degrees to Face the ladder\n    rotate(RIGHT, 20, PERCENT, 90)\n    drivetrain.drive_for(FORWARD, 800, MM)\n    rotate(RIGHT, 20, PERCENT, 25)\n    drivetrain.drive_for(FORWARD, 300, MM)\n    claw_cyl.set(True)\n    im1.stop()\n    im2.set_velocity(100, PERCENT)\n    im2.spin_for(REVERSE, 360, DEGREES)\n    #Final Score - 6 points\n    #End of auton code\n\"\"\"\n\n\n# Driver control code\ndef driver_control():\n    im2.set_position(0, DEGREES)\n    while True:\n        if controller_1.buttonR1.pressing():\n            im1.spin(FORWARD, 100, PERCENT)\n        elif controller_1.buttonDown.pressing():\n            im1.spin(REVERSE, 100, PERCENT)\n        elif controller_1.buttonR2.pressing():\n            im1.stop()\n        #MOGO controls\n        #MOGO raise Close\n        elif controller_1.buttonL1.pressing():\n            mogo_cyl.set(False)# Extend the pneumatic\n        elif controller_1.buttonL2.pressing():\n            mogo_cyl.set(True)# Retract the pneumatic\n        \n        #Wallstake controls\n        #Wallstake raise Close\n        elif controller_1.buttonX.pressing():\n            wall_stake_cyl.set(True)\n        #Wallstake Lower\n        elif controller_1.buttonA.pressing():\n                wall_stake_cyl.set(False)\n        \n        elif controller_1.buttonRight.pressing():\n            im2.set_velocity(100, PERCENT)\n            im2.spin_for(REVERSE, 365, DEGREES)\n            #im2.spin_to_position(0, DEGREES)\n        #Claw Control\n        #Claw Close\n        elif controller_1.buttonUp.pressing():\n            claw_cyl.set(False)\n        #Claw open\n        elif controller_1.buttonLeft.pressing():\n            claw_cyl.set(True)\n        \n        #doinker control\n        #Raise Doinker\n        elif controller_1.buttonY.pressing():\n            doinker_cyl.set(True)\n        #Lower Doinker\n        elif controller_1.buttonB.pressing():\n            doinker_cyl.set(False) \n        else:\n\n        # Get joystick values\n            forward = controller_1.axis3.position()\n            turn = controller_1.axis4.position()\n\n        # Calculate motor speeds\n            left_speed = forward + turn\n            right_speed = forward - turn\n\n        # Apply motor speeds\n            Lmg.spin(FORWARD, left_speed, PERCENT)\n            Rmg.spin(FORWARD, right_speed, PERCENT)\n\n \n# End driver control code\n \n# Define the competition to run auton and driver control during matches\ncompetition = Competition(driver_control, autonomous)","textLanguage":"python","robotConfig":[],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}