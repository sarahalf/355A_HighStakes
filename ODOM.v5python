{"mode":"Text","hardwareTarget":"brain","textContent":"0\n    global x, y, theta\n    \n    # Get the encoder values\n    left_encoder = rotation_1.position(DEGREES)\n    right_encoder = rotation_2.position(DEGREES)\n\n    # Calculate the distance traveled by each wheel\n    left_distance = left_encoder * ODOM_WHEEL * math.pi / 360.0\n    right_distance = right_encoder * ODOM_WHEEL * math.pi / 360.0\n\n    # Calculate the change in heading\n    delta_theta = (left_encoder - theta) + (right_encoder - theta) / 2\n\n    # Calculate the change in position\n    delta_x = (left_distance + right_distance) / 2.0 * math.cos(math.radians(theta))\n    delta_y = (left_distance + right_distance) / 2.0 * math.sin(math.radians(theta))\n\n    # Update the odometry variables\n    x += delta_x\n    y += delta_y\n    theta += delta_theta\n    brain.screen.print(\"X:\", x, \"Y:\", y, \"Theta:\", theta)\n    brain.screen.next_row()\n    \n# Main loop\n\"\"\"\nwhile True:\n    # Get joystick values\n    forward = controller_1.axis3.position()\n    turn = controller_1.axis4.position()\n\n    # Calculate motor speeds\n    left_speed = forward + turn\n    right_speed = forward - turn\n\n    # Apply motor speeds\n    Lmg.spin(FORWARD, left_speed, PERCENT)\n    Rmg.spin(FORWARD, right_speed, PERCENT)\n    update_odometry()\n\n    # Do something with the odometry data\n    brain.screen.print(\"X:\", x, \"Y:\", y, \"Theta:\", theta)\n    brain.screen.next_row()\n\"\"\"\ndef drive_w_ODOM(distance, Angle):\n    d = (distance / WHEEL_S) * 360\n    while True:\n        update_odometry()\n        if  x == d:\n            drivetrain.stop()\n        else:\n            drivetrain.drive(FORWARD)\n# auton code\ndef autonomous():\n    # Start off auton code\n    drive_w_ODOM(1, 0)\n    \n    \"\"\"\n    AV3 Idea 1 -\n    Starting position - the robot holding the preload in the claw, \n    facing the east wall lined up perpendicular to the alliance stake\n    \"\"\"\n\n\n\n# Driver control code\ndef driver_control():\n\n        # Get joystick values\n            forward = controller_1.axis3.position()\n            turn = controller_1.axis4.position()\n\n        # Calculate motor speeds\n            left_speed = forward + turn\n            right_speed = forward - turn\n\n        # Apply motor speeds\n            Lmg.spin(FORWARD, left_speed, PERCENT)\n            Rmg.spin(FORWARD, right_speed, PERCENT)\n \n# Define the competition to run auton and driver control during matches\ncompetition = Competition(driver_control, autonomous)","textLanguage":"python","robotConfig":[{"port":[1],"name":"rotation_1","customName":false,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[2],"name":"rotation_2","customName":false,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"},"triportSourcePort":22},{"port":[3],"name":"inertial_3","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}